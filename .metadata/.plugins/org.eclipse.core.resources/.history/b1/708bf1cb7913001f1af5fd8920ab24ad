package com.example.tabelog_nagoyameshi.controller;

import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.web.PageableDefault;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.example.tabelog_nagoyameshi.entity.Category;
import com.example.tabelog_nagoyameshi.entity.Store;
import com.example.tabelog_nagoyameshi.form.StoreEditForm;
import com.example.tabelog_nagoyameshi.form.StoreRegisterForm;
import com.example.tabelog_nagoyameshi.repository.CategoryRepository;
import com.example.tabelog_nagoyameshi.repository.StoreRepository;
import com.example.tabelog_nagoyameshi.service.StoreService;

@Controller
public class AdminStoreController {
	private final StoreRepository storeRepository;
	private final CategoryRepository categoryRepository;
	private final StoreService storeService;
	
	public AdminStoreController(StoreRepository storeRepository, CategoryRepository categoryRepository, StoreService storeService) {
		this.storeRepository = storeRepository;
		this.categoryRepository = categoryRepository;
		this.storeService = storeService;
	}
	
	//店舗管理ページ
	@GetMapping("/login/stores")
	public String index(Model model, @PageableDefault(page = 0, size = 10, sort = "id", direction = Direction.ASC) Pageable pageable, @RequestParam(name = "storeKeyword", required = false) String storeKeyword, @RequestParam(name = "categoryKeyword", required = false) String categoryKeyword, @RequestParam(name = "price", required = false) Integer price, @RequestParam(name = "order", required = false) String order) {
		Page<Store> storePage;
		
		if(storeKeyword != null && !storeKeyword.isEmpty()) {
			if(order != null && order.equals("minimumBudgetAsc")) {
				storePage = storeRepository.findByStoreNameLikeOrAlphabetLikeOrFuriganaLikeOrderByMinimumBudgetAsc("%" + storeKeyword + "%", "%" + storeKeyword + "%", "%" + storeKeyword + "%", pageable);
			}else if(order != null && order.equals("furiganaAsc")) {
				storePage = storeRepository.findByStoreNameLikeOrAlphabetLikeOrFuriganaLikeOrderByFuriganaAsc("%" + storeKeyword + "%", "%" + storeKeyword + "%", "%" + storeKeyword + "%", pageable);
			}else{
				storePage = storeRepository.findByStoreNameLikeOrAlphabetLikeOrFuriganaLikeOrderByCreatedAtDesc("%" + storeKeyword + "%", "%" + storeKeyword + "%", "%" + storeKeyword + "%", pageable);
			}
		}else if(price != null) {
			if(order != null && order.equals("createdAtDesc")) {
				shopPage = shopRepository.findByMinimumBudgetLessThanEqualOrderByCreatedAtDesc(price, pageable);
			}else if(order != null && order.equals("minimumBudgetAsc")) {
				shopPage = shopRepository.findByMinimumBudgetLessThanEqualOrderByMinimumBudgetAsc(price, pageable);
			}else{
				shopPage = shopRepository.findByMinimumBudgetLessThanEqualOrderByFuriganaAsc(price, pageable);
			}
		}else if(categoryKeyword != null && !categoryKeyword.isEmpty()) {
			if(order != null && order.equals("createdAtDesc")) {
				shopPage = shopRepository.findByCategoryOrderByCreatedAtDesc(categoryRepository.findByCategoryNameLike("%" + categoryKeyword + "%"), pageable);
			}else if(order != null && order.equals("minimumBudgetAsc")) {
				shopPage = shopRepository.findByCategoryOrderByMinimumBudgetAsc(categoryRepository.findByCategoryNameLike("%" + categoryKeyword + "%"), pageable);
			}else{
				shopPage = shopRepository.findByCategoryOrderByFuriganaAsc(categoryRepository.findByCategoryNameLike("%" + categoryKeyword + "%"), pageable);
			}
		}else {
			if(order != null && order.equals("furiganaAsc")) {
				shopPage = shopRepository.findAllByOrderByFuriganaAsc(pageable);
			}else if(order != null && order.equals("minimumBudgetAsc")) {
				shopPage = shopRepository.findAllByOrderByMinimumBudgetAsc(pageable);
			}else{
				shopPage = shopRepository.findAllByOrderByCreatedAtDesc(pageable);
			}
		}
		
		List<Category> categoryList = categoryRepository.findAll();
		
		model.addAttribute("shopPage", shopPage);
		model.addAttribute("shopKeyword", shopKeyword);
		model.addAttribute("categoryKeyword", categoryKeyword);
		model.addAttribute("order", order);
		model.addAttribute("categoryList", categoryList);
		
		return "adminShop/index";
	}
	
	//店舗登録ページ
	@GetMapping("/login/shops/register")
	public String register(Model model) {
		List<Category> categoryList = categoryRepository.findAll();
		
		model.addAttribute("shopRegisterForm", new StoreRegisterForm());
		model.addAttribute("categoryList", categoryList);
		
		return "adminShop/register";
	}
	
	//店舗情報編集ページ
	@GetMapping("login/shops/{id}")
	public String update(@PathVariable(name = "id")Integer id, Model model) {
		Store shop = shopRepository.getReferenceById(id);
		StoreEditForm shopEditForm = new StoreEditForm(id, shop.getCategory().getCategoryName(), shop.getShopName(), shop.getFurigana(), shop.getAlphabet(), null, shop.getDescription(), shop.getOpeningHour(), shop.getClosingHour(), shop.getClosedDay(), shop.getMinimumBudget(), shop.getMaximumBudget(), shop.getAddress(), shop.getPhoneNumber(), shop.getSeats());
		List<Category> categoryList = categoryRepository.findAll();
		
		model.addAttribute("shop", shop);
		model.addAttribute("shopEditForm", shopEditForm);
		model.addAttribute("categoryList", categoryList);
		
		return "adminShop/edit";
	}
	
	//店舗登録処理
	@PostMapping("/login/shops/register/create")
	public String create(StoreRegisterForm shopRegisterForm, RedirectAttributes redirectAttributes) {
		shopService.create(shopRegisterForm);
		
		redirectAttributes.addFlashAttribute("createSuccessMessage", "店舗登録が完了しました。");
		
		return "redirect:/login/shops";
	}
	
	//店舗削除処理
	@PostMapping("/login/shops/{id}/delete")
	public String delete(@PathVariable(name = "id")Integer id, RedirectAttributes redirectAttributes) {
		shopRepository.deleteById(id);
		
		redirectAttributes.addFlashAttribute("deleteSuccessMessage", "店舗情報を削除しました。");
		
		return "redirect:/login/shops";
	}
	
	//店舗情報編集機能
	@PostMapping("/login/shops/{id}/update")
	public String update(@ModelAttribute @Validated StoreEditForm shopEditForm, RedirectAttributes redirectAttributes) {
		shopService.update(shopEditForm);
		
		redirectAttributes.addFlashAttribute("updateSuccessMessage", "店舗情報を変更しました。");
		
		return "redirect:/login/shops";
	}

}